# -*- coding: utf-8 -*-
"""wsd_assessment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZFpVcP1BvbtmQE8X_Xi0D6DTOOwu44JZ
"""

!pip install tabulate
from tabulate import tabulate

class Account:
    min_account_number_length = 6
    min_name_length = 3
    max_account_number_length = 10
    max_name_length = 30

    def __init__(self, name, number, balance=0, account_type=''):
        """
        Initializes an account with the given name, account number, and balance.

        Parameters:
        - name (str): The account holder's name.
        - number (str): The account number.
        - balance (float): The initial balance (default is 0).
        - account_type (str): The type of the account (e.g., 'Current', 'Savings', 'Salary').
        """
        self.name = name
        self.number = number
        self.balance = balance
        self.account_type = account_type

    def display(self):
        """
        Displays account information, including account number, name, and balance.
        """
        print(f"Account Number: {self.number}\tName: {self.name}\tBalance: {self.balance}")

    def deposit(self, amount):
        """
        Deposits the specified amount into the account.

        Parameters:
        - amount (float): The amount to be deposited.
        """
        self.balance += amount
        print(f"Deposited {amount} into account {self.number}. New balance: {self.balance}")

    def withdraw(self, amount):
        """
        Withdraws the specified amount from the account, considering minimum balance requirements.

        Parameters:
        - amount (float): The amount to be withdrawn.
        """
        left = self.balance - amount
        if left >= self.min_balance:
            self.balance -= amount
            print(f"Withdrew {amount} from account {self.number}. New balance: {self.balance}")
        elif left >= 0:
            print(f"Withdrawal amount exceeds the minimum withdrawal limit. Minimum balance required before withdrawing: {self.min_balance}")
        else:
            print(f"Insufficient balance to withdraw. Minimum balance required: {self.min_balance}")

class CurrentAccount(Account):
    min_balance_to_open = 5000
    min_balance = 1000  # Minimum balance required before withdrawing

    def __init__(self, name, number, balance=0):
        """
        Initializes a Current Account.

        Parameters:
        - name (str): The account holder's name.
        - number (str): The account number.
        - balance (float): The initial balance (default is 0).
        """
        if balance < self.min_balance_to_open:
            raise ValueError(f"Minimum balance of {self.min_balance_to_open} required to open a Current Account.")
        super().__init__(name, number, balance, 'Current')

class SavingsAccount(Account):
    min_balance_to_open = 2000
    min_balance = 500  # Minimum balance required before withdrawing

    def __init__(self, name, number, balance=0):
        """
        Initializes a Savings Account.

        Parameters:
        - name (str): The account holder's name.
        - number (str): The account number.
        - balance (float): The initial balance (default is 0).
        """
        if balance < self.min_balance_to_open:
            raise ValueError(f"Minimum balance of {self.min_balance_to_open} required to open a Savings Account.")
        super().__init__(name, number, balance, 'Savings')

class SalaryAccount(Account):
    min_balance_to_open = 1000
    min_balance = 0  # Salary account may not have a minimum balance before withdrawing

    def __init__(self, name, number, balance=0):
        """
        Initializes a Salary Account.

        Parameters:
        - name (str): The account holder's name.
        - number (str): The account number.
        - balance (float): The initial balance (default is 0).
        """
        if balance < self.min_balance_to_open:
            raise ValueError(f"Minimum balance of {self.min_balance_to_open} required to open a Salary Account.")
        super().__init__(name, number, balance, 'Salary')

def AC(info):
    """
    Gets and validates an account number with a minimum and maximum length.

    Parameters:
    - info (str): Additional information for the user prompt.

    Returns:
    - number (str): The validated account number.
    """
    while True:
        number = input(f"Enter account number to {info} (minimum {Account.min_account_number_length} and maximum {Account.max_account_number_length} digits) : ")
        if number.isnumeric():
            if len(number)>=Account.min_account_number_length and len(number) <= Account.max_account_number_length:
                break
            elif len(number)<Account.min_account_number_length:
                print(f"Account number must have at least {Account.min_account_number_length} digits.")
            else:
                print('Sorry! Maximum limit exceeded')
        else:
            print("Invalid account number. Please enter numeric characters only(0-9).")
    return number

def AM(info):
    """
    Gets and validates an amount input.

    Parameters:
    - info (str): Additional information for the user prompt.

    Returns:
    - amount (str): The validated amount input.
    """
    while True:
        amount = input(f"Enter amount to {info}: ")
        if amount.isnumeric():
            return amount
        else:
            print("Invalid amount. Please enter numeric characters only(0-9).")

def NM(info):
    """
    Gets and validates an account holder's name with a minimum and maximum length.

    Parameters:
    - info (str): Additional information for the user prompt.

    Returns:
    - name (str): The validated account holder's name.
    """
    while True:
        name = input(f"Enter account holder's name to {info} (minimum {Account.min_name_length} and maximum {Account.max_name_length} characters): ")
        if len(name)>=Account.min_name_length and len(name) <= Account.max_name_length:
            parts = name.split()

            # Check if all parts contain alphabetic characters
            if all(part.isalpha() for part in parts):
                break
            else:
                print("Invalid name. Please enter alphabetic characters only (A-Z, a-z).")
        elif len(name)<Account.min_name_length:
            print(f'Account name must have at least {Account.min_name_length} alphabetic characters.')
        else:
            print('Sorry! Maximum limit exceeded')
    return name

def create_account(account_type):
    """
    Creates a new account based on user input.

    Parameters:
    - account_type (int): The selected account type.

    Returns:
    - account (Account): The created account object or None if creation fails.
    """
    print("Please provide the following details:")

    # Get account holder's name
    name = NM("create")

    # Get account number
    number = AC("create")

    try:
        # Get the minimum balance required based on the selected account type
        if account_type == 1:
            min_balance_required = CurrentAccount.min_balance_to_open
        elif account_type == 2:
            min_balance_required = SavingsAccount.min_balance_to_open
        elif account_type == 3:
            min_balance_required = SalaryAccount.min_balance_to_open
        else:
            raise ValueError("Invalid account type selection.")

        # Get initial balance
        while True:
            initial_balance_str = input(f"Enter initial balance (Minimum balance required: {min_balance_required}): ")
            if initial_balance_str.isnumeric():
                initial_balance = float(initial_balance_str)
                if initial_balance >= min_balance_required:
                    break
                else:
                    print(f"Initial balance must be at least {min_balance_required}.")
            else:
                print("Invalid initial balance. Please enter numeric characters only(0-9).")

        # Create the account based on the selected account type
        if account_type == 1:
            return CurrentAccount(name, number, initial_balance)
        elif account_type == 2:
            return SavingsAccount(name, number, initial_balance)
        elif account_type == 3:
            return SalaryAccount(name, number, initial_balance)
        else:
            raise ValueError("Invalid account type selection.")
    except ValueError as e:
        print(f"Error: {e}")
        return None

def display_all_accounts(accounts):
    """
    Displays information for all accounts in a tabular format.

    Parameters:
    - accounts (dict): A dictionary containing account objects.

    Notes:
    - If there are no accounts, a message is displayed indicating so.
    """
    if not accounts:
        print("No accounts to display.")
        return

    headers = ["Account Number", "Name", "Balance", "Account Type"]
    table_data = []

    for account_number, account in accounts.items():
        account_info = [account.number, account.name, account.balance, account.account_type]
        table_data.append(account_info)

    print(tabulate(table_data, headers=headers, tablefmt="fancy_grid"))

def update_account(accounts, account_number):
    """
    Updates the name of an existing account based on user input.

    Parameters:
    - accounts (dict): A dictionary containing account objects.
    - account_number (str): The account number of the account to be updated.

    Notes:
    - If the account is not found, a message is displayed.
    - Users are prompted whether they want to update their name.
    - If they choose to update, they are prompted to enter the new name.
    """
    if account_number in accounts:
        account = accounts[account_number]

        print(f"Account Number: {account.number}\tName: {account.name}")

        # Ask if the user wants to update their name
        update_name_choice = input("Do you want to update your name? (yes/no): ").lower()

        if update_name_choice == "yes":
          while True:
            name = input(f"Enter new account holder's name (minimum {Account.min_name_length} and maximum {Account.max_name_length} characters): ")
            if len(name)>=Account.min_name_length and len(name) <= Account.max_name_length:
                parts = name.split()

                # Check if all parts contain alphabetic characters
                if all(part.isalpha() for part in parts):
                    account.name = name
                    print(f"Account {account_number} updated successfully.")
                    break
                else:
                    print("Invalid name. Please enter alphabetic characters only (A-Z, a-z).")
            elif len(name)<Account.min_name_length:
                print(f'Account name must have at least {Account.min_name_length} alphabetic characters.')
            else:
                print('Sorry! Maximum limit exceeded')

        elif update_name_choice == "no":
            print("Name update skipped.")
        else:
            print("Invalid choice. Name update skipped.")

    else:
        print("Account not found.")

def delete_account(accounts, account_number):
    """
    Deletes an existing account based on user input.

    Parameters:
    - accounts (dict): A dictionary containing account objects.
    - account_number (str): The account number of the account to be deleted.

    Notes:
    - If the account is not found, a message is displayed.
    - Users are prompted for confirmation before deletion.
    """
    if account_number in accounts:
        account = accounts[account_number]

        print(f"Account Number: {account.number}\tName: {account.name}")

        # Ask for confirmation before deleting the account
        delete_confirmation = input("Do you want to delete your account? (yes/no): ").lower()

        if delete_confirmation == "yes":
            del accounts[account_number]
            print(f"Account {account_number} deleted successfully.")
        elif delete_confirmation == "no":
            print("Account deletion skipped.")
        else:
            print("Invalid choice. Account deletion skipped.")

    else:
        print("Account not found.")

def search_account(accounts, account_number):
    """
    Searches for and displays information for an account based on user input.

    Parameters:
    - accounts (dict): A dictionary containing account objects.
    - account_number (str): The account number of the account to be searched.

    Notes:
    - If the account is not found, a message is displayed.
    """
    if account_number in accounts:
        accounts[account_number].display()
    else:
        print("Account not found.")

def main():
    """
    The main function to run the banking application.

    Notes:
    - Displays a beautified menu to the user.
    - Handles user input to perform various banking operations.
    """
    accounts = {}

    while True:
        # Decorator to beautify the menu display
        def beautify_menu(menu_function):
            def wrapper(*args, **kwargs):
                print("#" * 30)
                print("# Welcome to the Banking App #")
                print("#" * 30)
                menu_function(*args, **kwargs)
                print("#" * 30)

            return wrapper

        # Apply the decorator to your existing menu function
        @beautify_menu
        def display_menu():
            print("1. Create a new account")
            print("2. Display all accounts")
            print("3. Update an account")
            print("4. Delete an account")
            print("5. Deposit an amount into your account")
            print("6. Withdraw an amount from your account")
            print("7. Search for account")
            print("8. Exit")

        # Example of using the decorated menu
        display_menu()

        try:
            choice = int(input("Enter your choice (1-8): "))

            if choice == 1:
                account_type = int(input("Select account type (1. Current, 2. Savings, 3. Salary): "))
                account = create_account(account_type)
                if account:
                    accounts[account.number] = account
                    print(f"Account {account.number} created successfully.")
                else:
                    print("Failed to create account. Please check the error message.")

            elif choice == 2:
                display_all_accounts(accounts)

            elif choice == 3:
                account_number = AC("update")
                update_account(accounts, account_number)

            elif choice == 4:
                account_number = AC('delete')
                delete_account(accounts, account_number)

            elif choice == 5:
                account_number = AC('deposit')
                if account_number in accounts:
                    amount = float(AM('deposit'))
                    accounts[account_number].deposit(amount)
                else:
                    print("Account not found.")

            elif choice == 6:
                account_number = AC('withdraw')
                if account_number in accounts:
                    amount = float(AM('withdraw'))
                    accounts[account_number].withdraw(amount)
                else:
                    print("Account not found.")

            elif choice == 7:
                account_number = AC('search')
                search_account(accounts, account_number)

            elif choice == 8:
                print("Exiting the banking application.")
                break

            else:
                print("Invalid choice. Please enter a number between 1 and 8.")
        except ValueError:
            print("Invalid input. Please enter a valid number.")

if __name__ == "__main__":
    main()